// line 1 "lex.rl"
// Code generated by ragel -Z -G2 lex.rl. DO NOT EDIT.

package flatlang

import "fmt"

// line 101 "lex.rl"

// line 15 "lex.go"
const expr_start int = 10
const expr_first_final int = 10
const expr_error int = 0

const expr_en_string int = 30
const expr_en_rstring int = 32
const expr_en_qstring int = 34
const expr_en_expr int = 10

// line 104 "lex.rl"

func lexData(data []byte, r *Lexer) (err error) {
	var cs, act, ts, te, top int
	var stack [64]int
	p, pe := 0, len(data)
	eof := pe

	// line 34 "lex.go"
	{
		cs = expr_start
		top = 0
		ts = 0
		te = 0
		act = 0
	}

	// line 111 "lex.rl"
	_, _, _, _, _, _ = expr_first_final, expr_error, expr_en_string, expr_en_rstring, expr_en_qstring, expr_en_expr
	if r.file == nil {
		r.file = fileset.AddFile("(string)", -1, len(data))
	}
	if r.Data == nil {
		r.Data = data
	} else {
		r.Data = append(r.Data, data...)
	}
	nostack := func() bool {
		if top != len(stack) {
			return false
		}
		err = r.Errorf("exceeds recursion limit")
		return true
	}

	var backrefs Stack

	tok := func(sym int) { r.Tokens = append(r.Tokens, Token{Sym: sym, Pos: ts, End: te}) }
	tokcomment := func(sym int) { r.Comments = append(r.Comments, Token{Sym: sym, Pos: ts, End: te}) }
	tokenter := func(sym, fin int) { backrefs.Push(len(r.Tokens), fin); tok(sym) }
	tokleave := func(sym int) bool {
		tok(sym)
		if top == 0 || len(backrefs) == 0 {
			err = r.Errorf("does not close anything")
			return false
		}
		iprev, prevsym := backrefs.Pop()
		if prevsym != sym {
			err = r.Errorf("does not close %v", r.Tokens[iprev])
			return false
		}
		r.Tokens[len(r.Tokens)-1].Prev = iprev
		return true
	}
	addLines := func() {
		for i := ts; i < te; i++ {
			if data[i] == '\n' {
				r.file.AddLine(i)
			}
		}
	}

	// line 89 "lex.go"
	{
		if p == pe {
			goto _test_eof
		}
		goto _resume

	_again:
		switch cs {
		case 10:
			goto st10
		case 11:
			goto st11
		case 1:
			goto st1
		case 12:
			goto st12
		case 2:
			goto st2
		case 3:
			goto st3
		case 13:
			goto st13
		case 14:
			goto st14
		case 15:
			goto st15
		case 16:
			goto st16
		case 17:
			goto st17
		case 4:
			goto st4
		case 5:
			goto st5
		case 18:
			goto st18
		case 19:
			goto st19
		case 20:
			goto st20
		case 21:
			goto st21
		case 22:
			goto st22
		case 23:
			goto st23
		case 24:
			goto st24
		case 25:
			goto st25
		case 26:
			goto st26
		case 27:
			goto st27
		case 28:
			goto st28
		case 29:
			goto st29
		case 30:
			goto st30
		case 31:
			goto st31
		case 6:
			goto st6
		case 32:
			goto st32
		case 33:
			goto st33
		case 7:
			goto st7
		case 34:
			goto st34
		case 35:
			goto st35
		case 8:
			goto st8
		case 9:
			goto st9
		case 36:
			goto st36
		case 0:
			goto st0
		}

		if p++; p == pe {
			goto _test_eof
		}
	_resume:
		switch cs {
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 1:
			goto st_case_1
		case 12:
			goto st_case_12
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 29:
			goto st_case_29
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 6:
			goto st_case_6
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 7:
			goto st_case_7
		case 34:
			goto st_case_34
		case 35:
			goto st_case_35
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 36:
			goto st_case_36
		case 0:
			goto st_case_0
		}
		goto st_out
	tr0:
		// line 97 "lex.rl"

		p = (te) - 1
		{
			tok(int(data[ts]))
		}
		goto st10
	tr2:
		// line 82 "lex.rl"

		p = (te) - 1
		{
			tok(float)
		}
		goto st10
	tr7:
		// line 77 "lex.rl"

		te = p + 1
		{
			tokcomment(comment)
			addLines()
		}
		goto st10
	tr16:
		// line 97 "lex.rl"

		te = p + 1
		{
			tok(int(data[ts]))
		}
		goto st10
	tr18:
		// line 88 "lex.rl"

		te = p + 1
		{
			tokenter('"', '"')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st32
				}
			}
		}
		goto st10
	tr20:
		// line 87 "lex.rl"

		te = p + 1
		{
			tokenter('\'', '\'')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st30
				}
			}
		}
		goto st10
	tr21:
		// line 92 "lex.rl"

		te = p + 1
		{
			tokenter('(', ')')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st10
				}
			}
		}
		goto st10
	tr22:
		// line 95 "lex.rl"

		te = p + 1
		{
			if !tokleave(int(data[ts])) {
				return
			}
			{
				top--
				cs = stack[top]
				goto _again
			}
		}
		goto st10
	tr30:
		// line 93 "lex.rl"

		te = p + 1
		{
			tokenter('[', ']')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st10
				}
			}
		}
		goto st10
	tr31:
		// line 89 "lex.rl"

		te = p + 1
		{
			tokenter('`', '`')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st34
				}
			}
		}
		goto st10
	tr34:
		// line 94 "lex.rl"

		te = p + 1
		{
			tokenter('{', '}')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st10
				}
			}
		}
		goto st10
	tr35:
		// line 97 "lex.rl"

		te = p
		p--
		{
			tok(int(data[ts]))
		}
		goto st10
	tr37:
		// line 82 "lex.rl"

		te = p
		p--
		{
			tok(float)
		}
		goto st10
	tr39:
		// line 73 "lex.rl"

		te = p
		p--

		goto st10
	tr40:
		// line 91 "lex.rl"

		te = p + 1
		{
			tokenter(interp, '}')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 10
					top++
					goto st10
				}
			}
		}
		goto st10
	tr42:
		// line 76 "lex.rl"

		te = p
		p--
		{
			tokcomment(comment)
		}
		goto st10
	tr43:
		// line 81 "lex.rl"

		te = p
		p--
		{
			tok(int_)
		}
		goto st10
	tr44:
		// line 84 "lex.rl"

		te = p + 1
		{
			tok(lte)
		}
		goto st10
	tr45:
		// line 85 "lex.rl"

		te = p + 1
		{
			tok(gte)
		}
		goto st10
	tr46:
		// line 1 "NONE"

		switch act {
		case 13:
			{
				p = (te) - 1
				tok(ident)
			}
		case 14:
			{
				p = (te) - 1
				tok(bool_)
			}
		}

		goto st10
	tr47:
		// line 79 "lex.rl"

		te = p
		p--
		{
			tok(ident)
		}
		goto st10
	st10:
		// line 1 "NONE"

		ts = 0

		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
		// line 1 "NONE"

		ts = p

		// line 407 "lex.go"
		switch data[p] {
		case 0:
			goto tr15
		case 13:
			goto st14
		case 32:
			goto st14
		case 34:
			goto tr18
		case 36:
			goto st15
		case 39:
			goto tr20
		case 40:
			goto tr21
		case 41:
			goto tr22
		case 46:
			goto st16
		case 47:
			goto tr24
		case 48:
			goto st19
		case 60:
			goto st21
		case 62:
			goto st22
		case 91:
			goto tr30
		case 93:
			goto tr22
		case 96:
			goto tr31
		case 102:
			goto st24
		case 116:
			goto st28
		case 123:
			goto tr34
		case 125:
			goto tr22
		}
		switch {
		case data[p] < 49:
			if 9 <= data[p] && data[p] <= 10 {
				goto st14
			}
		case data[p] > 57:
			switch {
			case data[p] > 90:
				if 97 <= data[p] && data[p] <= 122 {
					goto tr29
				}
			case data[p] >= 65:
				goto tr29
			}
		default:
			goto st20
		}
		goto tr16
	tr15:
		// line 1 "NONE"

		te = p + 1

		goto st11
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
		// line 479 "lex.go"
		if data[p] == 46 {
			goto st1
		}
		goto tr35
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		if 48 <= data[p] && data[p] <= 57 {
			goto tr1
		}
		goto tr0
	tr1:
		// line 1 "NONE"

		te = p + 1

		goto st12
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
		// line 504 "lex.go"
		switch data[p] {
		case 69:
			goto st2
		case 101:
			goto st2
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto tr1
		}
		goto tr37
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		switch data[p] {
		case 43:
			goto st3
		case 45:
			goto st3
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st13
		}
		goto tr2
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		if 48 <= data[p] && data[p] <= 57 {
			goto st13
		}
		goto tr2
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
		if 48 <= data[p] && data[p] <= 57 {
			goto st13
		}
		goto tr37
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
		switch data[p] {
		case 13:
			goto st14
		case 32:
			goto st14
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st14
		}
		goto tr39
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		if data[p] == 123 {
			goto tr40
		}
		goto tr35
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
		if 48 <= data[p] && data[p] <= 57 {
			goto tr1
		}
		goto tr35
	tr24:
		// line 1 "NONE"

		te = p + 1

		goto st17
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
		// line 592 "lex.go"
		switch data[p] {
		case 42:
			goto st4
		case 47:
			goto st18
		}
		goto tr35
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
		if data[p] == 42 {
			goto st5
		}
		goto st4
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch data[p] {
		case 42:
			goto st5
		case 47:
			goto tr7
		}
		goto st4
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
		switch data[p] {
		case 10:
			goto tr42
		case 13:
			goto tr42
		}
		goto st18
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		if 48 <= data[p] && data[p] <= 57 {
			goto st19
		}
		goto tr43
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		if data[p] == 46 {
			goto tr1
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st20
		}
		goto tr43
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
		if data[p] == 61 {
			goto tr44
		}
		goto tr35
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		if data[p] == 61 {
			goto tr45
		}
		goto tr35
	tr29:
		// line 1 "NONE"

		te = p + 1

		// line 79 "lex.rl"

		act = 13
		goto st23
	tr51:
		// line 1 "NONE"

		te = p + 1

		// line 80 "lex.rl"

		act = 14
		goto st23
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		// line 695 "lex.go"
		if data[p] == 95 {
			goto tr29
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr46
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		switch data[p] {
		case 95:
			goto tr29
		case 97:
			goto st25
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 98 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr47
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
		switch data[p] {
		case 95:
			goto tr29
		case 108:
			goto st26
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr47
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
		switch data[p] {
		case 95:
			goto tr29
		case 115:
			goto st27
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr47
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
		switch data[p] {
		case 95:
			goto tr29
		case 101:
			goto tr51
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr47
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		switch data[p] {
		case 95:
			goto tr29
		case 114:
			goto st29
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr47
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
		switch data[p] {
		case 95:
			goto tr29
		case 117:
			goto st27
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr29
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr47
	tr8:
		// line 1 "NONE"

		switch act {
		case 0:
			{
				{
					goto st0
				}
			}
		case 2:
			{
				p = (te) - 1

				tok(text)
				addLines()
			}
		}

		goto st30
	tr53:
		// line 23 "lex.rl"

		te = p + 1
		{
			if !tokleave('\'') {
				return
			}
			{
				top--
				cs = stack[top]
				goto _again
			}
		}
		goto st30
	tr55:
		// line 30 "lex.rl"

		te = p
		p--
		{
			tok(text)
			addLines()
		}
		goto st30
	st30:
		// line 1 "NONE"

		ts = 0

		// line 1 "NONE"

		act = 0

		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
		// line 1 "NONE"

		ts = p

		// line 909 "lex.go"
		switch data[p] {
		case 39:
			goto tr53
		case 92:
			goto st6
		}
		goto tr9
	tr9:
		// line 1 "NONE"

		te = p + 1

		// line 30 "lex.rl"

		act = 2
		goto st31
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
		// line 931 "lex.go"
		switch data[p] {
		case 39:
			goto tr55
		case 92:
			goto st6
		}
		goto tr9
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		goto tr9
	tr10:
		// line 1 "NONE"

		switch act {
		case 0:
			{
				{
					goto st0
				}
			}
		case 4:
			{
				p = (te) - 1

				tok(text)
				addLines()
			}
		}

		goto st32
	tr56:
		// line 37 "lex.rl"

		te = p + 1
		{
			if !tokleave('"') {
				return
			}
			{
				top--
				cs = stack[top]
				goto _again
			}
		}
		goto st32
	tr58:
		// line 44 "lex.rl"

		te = p
		p--
		{
			tok(text)
			addLines()
		}
		goto st32
	st32:
		// line 1 "NONE"

		ts = 0

		// line 1 "NONE"

		act = 0

		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		// line 1 "NONE"

		ts = p

		// line 998 "lex.go"
		switch data[p] {
		case 34:
			goto tr56
		case 92:
			goto st7
		}
		goto tr11
	tr11:
		// line 1 "NONE"

		te = p + 1

		// line 44 "lex.rl"

		act = 4
		goto st33
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		// line 1020 "lex.go"
		switch data[p] {
		case 34:
			goto tr58
		case 92:
			goto st7
		}
		goto tr11
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
		goto tr11
	tr12:
		// line 63 "lex.rl"

		p = (te) - 1
		{
			tok(text)
			addLines()
		}
		goto st34
	tr14:
		// line 1 "NONE"

		switch act {
		case 0:
			{
				{
					goto st0
				}
			}
		case 7:
			{
				p = (te) - 1

				tok(text)
				addLines()
			}
		}

		goto st34
	tr61:
		// line 51 "lex.rl"

		te = p + 1
		{
			if !tokleave('`') {
				return
			}
			{
				top--
				cs = stack[top]
				goto _again
			}
		}
		goto st34
	tr62:
		// line 63 "lex.rl"

		te = p
		p--
		{
			tok(text)
			addLines()
		}
		goto st34
	tr64:
		// line 68 "lex.rl"

		te = p
		p--
		{
			tok(text)
		}
		goto st34
	tr65:
		// line 58 "lex.rl"

		te = p + 1
		{
			tokenter(interp, '}')
			{
				if nostack() {
					return
				}
				{
					stack[top] = 34
					top++
					goto st10
				}
			}
		}
		goto st34
	st34:
		// line 1 "NONE"

		ts = 0

		// line 1 "NONE"

		act = 0

		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		// line 1 "NONE"

		ts = p

		// line 1112 "lex.go"
		switch data[p] {
		case 36:
			goto st36
		case 92:
			goto st9
		case 96:
			goto tr61
		}
		goto tr13
	tr13:
		// line 1 "NONE"

		te = p + 1

		// line 63 "lex.rl"

		act = 7
		goto st35
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		// line 1136 "lex.go"
		switch data[p] {
		case 36:
			goto st8
		case 92:
			goto st9
		case 96:
			goto tr62
		}
		goto tr13
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		switch data[p] {
		case 96:
			goto tr12
		case 123:
			goto tr12
		}
		goto tr13
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
		goto tr13
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		switch data[p] {
		case 96:
			goto tr64
		case 123:
			goto tr65
		}
		goto tr13
	st_case_0:
	st0:
		cs = 0
		goto _out
	st_out:
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof1:
		cs = 1
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof

	_test_eof:
		{
		}
		if p == eof {
			switch cs {
			case 11:
				goto tr35
			case 1:
				goto tr0
			case 12:
				goto tr37
			case 2:
				goto tr2
			case 3:
				goto tr2
			case 13:
				goto tr37
			case 14:
				goto tr39
			case 15:
				goto tr35
			case 16:
				goto tr35
			case 17:
				goto tr35
			case 4:
				goto tr0
			case 5:
				goto tr0
			case 18:
				goto tr42
			case 19:
				goto tr43
			case 20:
				goto tr43
			case 21:
				goto tr35
			case 22:
				goto tr35
			case 23:
				goto tr46
			case 24:
				goto tr47
			case 25:
				goto tr47
			case 26:
				goto tr47
			case 27:
				goto tr47
			case 28:
				goto tr47
			case 29:
				goto tr47
			case 31:
				goto tr55
			case 6:
				goto tr8
			case 33:
				goto tr58
			case 7:
				goto tr10
			case 35:
				goto tr62
			case 8:
				goto tr12
			case 9:
				goto tr14
			case 36:
				goto tr64
			}
		}

	_out:
		{
		}
	}

	// line 156 "lex.rl"

	if p != eof {
		err = r.Errorf("precedes the token that failed to lex")
	} else if len(backrefs) != 0 {
		iprev, _ := backrefs.Pop()
		prev := r.Tokens[iprev]
		err = fmt.Errorf("%s%s is not terminated", r.At(prev.Pos), Repr(prev.Sym))
	}
	return
}
